This is prototype code for the harnessed jobs in the electro-optical
testing task, T03, for Test Stand 3.  This is setup to be run using
the SLAC installation of the Job Harness code.

A "fake" LIMS server is implemented in my_fakelims.py to take the
place of the real LIMS or eTraveler applications.  The T03 traveler is
implemented as a python dictionary in the file ts3_traveler.py where
the dependencies between tasks are expressed.  my_fakelims.py is a
modified version of the fakelims.py in the lcatr repo and allows the
progress of a traveler execution to be saved in a pickled file so that
the fakelims server can be stopped and restarted without losing the
job id information.

To use it, source the setup.sh from bash, and run my_fakelims.py under
python:

% source ./setup.sh
% (python my_fakelims.py ts3_traveler.py) >& fakelims.out

To step the fake LIMS server, hit ctrl-c and a file called
my_fakelims.db will be written to the local directory with the
persisted server information.  If you rerun with the above line, the
job id and dependency info will be recovered from that pickle file and
you can pickup where you left off in executing the harnessed jobs.

The bash script run_job.sh has the full sequence of harnessed jobs, in
the proper execution order, for the dependency tree in
ts3_traveler.py.  While developing, I typically start with a clean
setup, and comment out lines in run_job.sh so that I can run (and
rerun) just the job(s) I am working on.

If you checkout a separate instance of this code and run on SLAC
linux, please change the paths in cleanup.sh and the unit_id in
lcatr.cfg.

-Jim, 2014-03-14


